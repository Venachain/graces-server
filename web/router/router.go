package router

import (
	"fmt"
	"net/http"

	"graces/config"
	"graces/middleware"
	"graces/model"
	"graces/web/controller"
	"graces/web/util/response"
	"graces/ws"
	// swagger embed files
	_ "graces/docs" // docs is generated by Swag CLI, you have to import it.

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

var (
	myRouter *gin.Engine
)

func init() {
	myRouter = gin.Default()
}

func InitRouter() *gin.Engine {
	myRouter.Use(middleware.PanicHandler())
	myRouter.Use(middleware.Cors())

	// debug 模式才注册 swagger 组件
	if gin.Mode() == gin.DebugMode {
		swaggerRouter()
	}
	customRouter()

	return myRouter
}

// SwaggerRouter swagger 路由
// 文档访问地址：http://127.0.0.1:9999/swagger/index.html
// @title Graces swagger
// @version 0.0.1
// @description Graces
// @contact.name yangyi
// @contact.email yangyi@wxblockchain.com
// @license.name ""
// @license.url ""
// @host http://127.0.0.1:9999
func swaggerRouter() {

	// The url pointing to API definition
	uri := fmt.Sprintf("http://%s:%s/swagger/doc.json",
		config.Config.HttpConf.IP,
		config.Config.HttpConf.Port)
	url := ginSwagger.URL(uri)
	myRouter.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler, url))
}

func customRouter() {
	myRouter.NoRoute(func(ctx *gin.Context) {
		result := model.Result{
			Code: http.StatusNotFound,
			Msg:  "no resource",
		}
		response.Fail(ctx, result)
	})
	myRouter.NoMethod(func(ctx *gin.Context) {
		result := model.Result{
			Code: http.StatusNotFound,
			Msg:  "no resource",
		}
		response.Fail(ctx, result)
	})

	// 首页
	indexGroup := myRouter.Group("/")
	{
		indexGroup.Any("", func(ctx *gin.Context) {
			result := model.Result{Code: http.StatusOK, Msg: "Welcome Graces Server", Data: nil}
			response.Success(ctx, result)
			return
		})
	}

	// 业务接口
	api := myRouter.Group("/api")
	{
		// websocket
		wsGroup := api.Group("/ws")
		{
			if gin.Mode() == gin.DebugMode {
				wsGroup.StaticFile("/ws_node.html", "./ws/ws_node.html")
				wsGroup.StaticFile("/ws_deploy.html", "./ws/ws_deploy.html")
				wsGroup.StaticFile("/ws_sub_test.html", "./ws/ws_sub_test.html")
			}

			wsGroup.GET("/:group", ws.DefaultWebsocketManager.WsClient)
			wsGroup.GET("/manager", controller.DefaultWebsocketController.Manager)
			wsGroup.GET("/groups", controller.DefaultWebsocketController.Groups)
			wsGroup.GET("/group/:group", controller.DefaultWebsocketController.GroupByName)

			if gin.Mode() == gin.DebugMode {
				wsGroup.POST("/send", controller.DefaultWebsocketController.Send)
				wsGroup.POST("/sendgroup", controller.DefaultWebsocketController.SendGroup)
				wsGroup.POST("/sendall", controller.DefaultWebsocketController.SendAll)
				wsGroup.POST("/dial", controller.DefaultWebsocketController.Dial)
				wsGroup.POST("/clientsend", controller.DefaultWebsocketController.ClientSend)
			}
		}

		chain := api.Group("/chain")
		{
			chain.GET("/id/:id", controller.DefaultChainController.ChainById)
			chain.GET("/name/:name", controller.DefaultChainController.ChainByName)
			chain.GET("/incrsync/start/:chainid", controller.DefaultChainController.IncrSyncStart)
			chain.GET("/fullsync/start/:chainid", controller.DefaultChainController.FullSyncStart)
			chain.GET("/sync/info/:chainid", controller.DefaultChainController.ChainDataSyncInfo)
			chain.GET("/getsystemconfig/:id", controller.DefaultChainController.GetSystemConfig)
			chain.GET("/stats/:chainid", controller.DefaultBlockController.Stats)
			chain.GET("/stats/tx/count/:chainid", controller.DefaultTXController.TxAmountStats)

			chain.POST("/setsystemconfig", controller.DefaultChainController.SetSystemConfig)
			chain.POST("", controller.DefaultChainController.InsertChain)
			chain.POST("/deploy/contract/:chainid", controller.DefaultChainController.DeployContract)
		}
		chains := api.Group("/chains")
		{
			chains.POST("", controller.DefaultChainController.Chains)
		}

		block := api.Group("/block")
		{
			block.GET("/id/:id", controller.DefaultBlockController.BlockByID)
			block.POST("/hash", controller.DefaultBlockController.BlockByHash)
		}
		blocks := api.Group("/blocks")
		{
			blocks.POST("", controller.DefaultBlockController.Blocks)
		}

		tx := api.Group("/tx")
		{
			tx.GET("/id/:id", controller.DefaultTXController.TXByID)
			tx.POST("/hash", controller.DefaultTXController.TXByHash)
		}
		txs := api.Group("/txs")
		{
			txs.POST("", controller.DefaultTXController.TXs)
			txs.POST("contractcall", controller.DefaultTXController.TXsForContractCall)
		}
		node := api.Group("/node")
		{
			node.GET("/id/:id", controller.DefaultNodeController.NodeByID)
		}
		nodes := api.Group("/nodes")
		{
			nodes.POST("", controller.DefaultNodeController.Nodes)
			nodes.POST("/sync", controller.DefaultNodeController.NodeSync)
		}
		contract := api.Group("/contract")
		{
			contract.POST("/openfirewall", controller.DefaultContractController.FireWallOpen)
			contract.POST("/closefirewall", controller.DefaultContractController.FireWallClose)
			contract.POST("/getfirewallstatus", controller.DefaultContractController.GetFirewallStatus)

			contract.POST("/address", controller.DefaultContractController.ContractByAddress)
		}
		contracts := api.Group("/contracts")
		{
			contracts.POST("", controller.DefaultContractController.Contracts)
		}

		cns := api.Group("/cns")
		{
			cns.GET("/:id", controller.DefaultCNSController.CNSByID)
			cns.POST("/register", controller.DefaultCNSController.Register)
			cns.POST("/redirect", controller.DefaultCNSController.Redirect)
		}
		cnss := api.Group("cnss")
		{
			cnss.POST("", controller.DefaultCNSController.CNSs)
		}

		account := api.Group("/account")
		{
			account.POST("/lock", controller.DefaultAccountController.LockAccount)
			account.POST("/unlock", controller.DefaultAccountController.UnlockAccount)
			//todo roleset
			//account.POST("/roleset",controller.DefaultAccountController.SetRole)
			account.POST("/list", controller.DefaultAccountController.ListAccount)
		}
	}
}
